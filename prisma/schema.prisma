// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  name         String?
  phone        String?
  role         Role     @default(USER)
  password     String
  country      String?
  state        String?
  city         String?
  videoProfile String?
  skills       String[]
  tools        String[]
  interests    String[]
  languages    String[]

  //for company only
  companyType       String?
  establishmentYear Int?
  yearsOfBusinesses Int?
  operationCountry  String?
  totalEmployees    Int?
  hiringFromShuroo  Int?
  about             String?
  logoImage         String?
  coverImage        String?

  fcmToken           String?
  image              String?
  status             Status           @default(PENDING)
  customerId         String?
  connectAccountId   String?
  isVerified         Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  receiver           Notifications[]  @relation("receiverDetails")
  sender             Notifications[]  @relation("senderDetails")
  Job                Job[]
  Post               Post[]
  Repost             Repost[]
  Favorite           Favorite[]
  Application        JobApplication[]
  Experience         Experience[]
  Education          Education[]
  user1Conversations Conversation[]   @relation("User1Conversations")
  user2Conversations Conversation[]   @relation("User2Conversations")
  UserMessages       Message[]        @relation("UserMessages")
  Comment            Comment[]
  ReplyComment       ReplyComment[]
  Like               Like[]
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}

model Job {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  deadline       String
  salary         Int
  experience     String
  location       String
  vacancy        Int
  mustSkills     String[]
  goodSkills     String[]
  description    String
  industryType   String
  department     String
  role           String
  employmentType employmentType
  education      String
  aboutCompany   String
  companyId      String           @db.ObjectId
  company        User             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Favorite       Favorite[]
  Application    JobApplication[]
}

model Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  title       String
  company     String
  startDate   String
  endDate     String
  description String
  userDetails User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Education {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  institute    String
  degreeName   String
  fieldOfStudy String
  startDate    String
  endDate      String
  grade        Float
  userDetails  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model JobApplication {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  jobId           String            @db.ObjectId
  status          applicationStatus @default(APPLIED)
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  isProfileViewed Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  jobId     String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  totalLike Int       @default(0)
  image     Json[]
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Repost    Repost[]
  Comment   Comment[]
  Like      Like[]
}

model Repost {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  totalLike Int       @default(0)
  postId    String    @db.ObjectId
  userId    String    @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Like      Like[]
}

model Comment {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  comment      String
  totalLike    Int            @default(0)
  userId       String         @db.ObjectId
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId       String?        @db.ObjectId
  post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  repostId     String?        @db.ObjectId
  repost       Repost?        @relation(fields: [repostId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ReplyComment ReplyComment[]
  Like         Like[]
}

model ReplyComment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  replyComment String
  totalLike    Int      @default(0)
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId    String   @db.ObjectId
  comment      Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Like         Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?   @db.ObjectId
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  repostId  String?   @db.ObjectId
  repost    Repost?   @relation(fields: [repostId], references: [id], onDelete: Cascade)
  commentId String?   @db.ObjectId
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  replyCommentId String?   @db.ObjectId
  replyComment   ReplyComment?  @relation(fields: [replyCommentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiverDetails", fields: [receiverId], references: [id])
  sender     User?    @relation("senderDetails", fields: [senderId], references: [id])
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String    @db.ObjectId
  user2Id   String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relationships
  messages  Message[] @relation("ConversationMessages")
  user1     User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User      @relation("User2Conversations", fields: [user2Id], references: [id])

  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  receiverId     String   @db.ObjectId
  content        String?
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  sender       User         @relation("UserMessages", fields: [senderId], references: [id])
  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@map("messages")
}

enum Role {
  USER
  ADMIN
  COMPANY
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}

enum applicationStatus {
  APPLIED
  SHORTLISTED
  INTERVIEW
}

enum employmentType {
  FULLTIME
  PARTTIME
  HYBRID
  REMOTE
}
