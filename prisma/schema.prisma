// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  email             String  @unique
  name              String?
  phone             String?
  role              Role    @default(USER)
  password          String
  country           String?
  state             String?
  city              String?
  //for company only
  companyType       String?
  establishmentYear Int?
  yearsOfBusinesses Int?
  operationCountry  String?
  totalEmployees    Int?
  hiringFromShuroo  Int?
  about             String?
  logoImage         String?
  coverImage        String?
  videoProfile      String?

  fcmToken         String?
  image            String?
  status           Status           @default(PENDING)
  customerId       String?
  connectAccountId String?
  isVerified       Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  receiver         Notifications[]  @relation("receiverDetails")
  sender           Notifications[]  @relation("senderDetails")
  Job              Job[]
  Post             Post[]
  Repost           Repost[]
  Favorite         Favorite[]
  Application      JobApplication[]
  Experience       Experience?
  Education        Education?
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}

model Job {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  deadline       String
  salary         Int
  experience     String
  location       String
  vacancy        Int
  mustSkills     String[]
  goodSkills     String[]
  description    String
  industryType   String
  department     String
  role           String
  employmentType employmentType
  education      String
  aboutCompany   String
  companyId      String           @db.ObjectId
  company        User             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Favorite       Favorite[]
  Application    JobApplication[]
}

model Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  title       String
  type        String
  company     String
  startDate   String
  endDate     String
  userDetails User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Education {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  institute    String
  degreeName   String
  fieldOfStudy String
  startDate    String
  endDate      String
  grade        Float
  description  String
  userDetails  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model JobApplication {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  jobId           String            @db.ObjectId
  status          applicationStatus @default(APPLIED)
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  isProfileViewed Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  jobId     String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  image     Json[]
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Repost    Repost[]
}

model Repost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiverDetails", fields: [receiverId], references: [id])
  sender     User?    @relation("senderDetails", fields: [senderId], references: [id])
}

enum Role {
  USER
  ADMIN
  COMPANY
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}

enum applicationStatus {
  APPLIED
  SHORTLISTED
  INTERVIEW
}

enum employmentType {
  FULLTIME
  PARTTIME
  HYBRID
  REMOTE
}
